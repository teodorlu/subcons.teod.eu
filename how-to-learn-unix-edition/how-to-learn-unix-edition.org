#+title: How To Learn — Unix Edition

* How to Learn — Unix Edition (Draft)
** Why learn
*** Fun
*** Effective
Exponential growth beats linear growth (given time).
** What to learn
*** Search for orthogonal skills that span a space where you want to have impact
** How to learn
*** Process
1. Define what you want to achieve
2. Learn fast by designing and implementing an interactive feedback loop
3. Reflect on process, outcome and goals - by yourself (journaling,
   introspection) and with others (retrospectives, feedback)

Repeat.
*** Example: Exercise from "TDT4120 - Algoritmer og datastrukturer"
Good?
*** Example: Exercise from "TKT4140 - Numeriske beregninger"
Good?
* Gap analysis
** Missing the real content - what do we want to show?
** Missing specificity in slides. What should the slides contain?
** Missing: a way to evaluate the outline and get feedback on it
How can I (quickly) turn this into something I can publish on the web?

Can I make due with some plain HTML?

And later enrich that HTML into something more?

I basically only ... need to create an index.html ... and make that make sense.
Proposed structure:

1. Load straight into a web page where the outline shows - as HTML
2. Load some javascript on top of that so that additional functionality can be
   provided.

Hmm, this could work. And could also be a reasonable way to get feedback. And I
could start from my org-mode pandoc stuff.
* 2022-04-10
** Copied notes from reflect.ted.eu README

[[https://github.com/teodorlu/reflect.teod.eu/blob/2ef748baaed2e753ffbb1c4630f31f0b8d4882e9/README.org#L3-L46][Source on github]].

*** How to learn

1. Learn the right things (search for orthogonal skills that spans a space where
   you want to have impact)
2. Learn fast with a rapid feedback loop
3. Reflect & introspect on process and intent

...

I want to be able to explain this to people. And I want to iterate on it myself.
I'll need some slides. And I'll want to edit those slides structurally, probably
with Org-mode. And I'll want to /run/ the resulting slides. Probably in a sci
context like scittle.

(That's actually a case for where sci-in-sci makes sense)

But ... how do I want to handle it? Produce static HTML, then enrich it? With
hooks, perhaps? Do I want to produce multiple files? I think I want to control
that with EDN data.

*** How to work with the outline/structure

No, that's not the right question.

There's a reason I'm not using React for this. Or just powerpoint.

The common "broad strokes" solution is often course, and hard to use. Not
flexible. I'd rather have sharp, precise tools that feel right in the hand.

I like outlines. And I like tools like Miro or Figma for visual presentation. So
... perhaps control the overall structure as an outline?

I want to ask Jack Rusher about how he's taking notes.

**** Digression - what ⟂ how

Tension:

Design ⟂ implementation enables discussing the /what/ in a resonable way

BUT design isn't 100 % decoupled from implementation. What can be implemented
directs the solution space. We want to /navigate the solution space
effectively/. Not ignore it
** Process goals
1. I want to play with tools, process and flow at the same time as I am creating
   content.
2. Process enables content.
3. Content informs process.
** Babashka or Clojure?
Using babashka all the way would be /really/ neat. Simple to work with. Not so
abstract.

But I'm afraid I'm not ready for that. Yet. I think a tight piece of Clojure
code would be better. At least, I'm not terribly sensitive to performance, as
long as it's ok.

I think a Babashka script would be a nice place to end up - but I'm not sure
that's a reasonable next step. Plus - this already works quite well.
